-- 계정 생성
CREATE USER KH_FINAL IDENTIFIED BY KH_FINAL;
GRANT RESOURCE, CONNECT, DBA TO KH_FINAL;

SELECT * FROM DBA_SYS_PRIVS
WHERE GRANTEE = 'KH_FINAL';

SELECT * FROM DBA_ROLE_PRIVS
WHERE GRANTEE = 'KH_FINAL2';

CREATE USER KH_FINAL2 IDENTIFIED BY KH_FINAL2;
DROP USER KH_FINAL2;
GRANT RESOURCE, CONNECT TO KH_FINAL2;

select * from role_sys_privs
where role='RESOURCE';

-- 이걸로 권한 주면 됨
alter user "KH_FINAL2" default tablespace users quota unlimited on users;

CREATE TABLE TEST (
    NO NUMBER
);

INSERT INTO TEST VALUES(1);

-----------------------------------------------------------------------------------------------------------------------------------------------------------
-- DDL ----------------------------------------------------------------------------------------------------------------------------------------------------
-- 일정 ---------------------------------------------------------------------------------------------------------------------------------------------------
DROP TABLE EVT_CATEGORY CASCADE CONSTRAINTS PURGE;
CREATE TABLE EVT_CATEGORY (
    CAT_NO NUMBER CONSTRAINT CAT_PK PRIMARY KEY,
    NAME VARCHAR(30) CONSTRAINT CAT_NAME_NN NOT NULL
);

COMMENT ON COLUMN EVT_CATEGORY.CAT_NO IS '분류번호';
COMMENT ON COLUMN EVT_CATEGORY.NAME IS '분류명';

--------------------------------------------------------------------------------
DROP TABLE EVENT CASCADE CONSTRAINTS PURGE;
CREATE TABLE EVENT (
    EVT_NO NUMBER CONSTRAINT EVT_PK PRIMARY KEY,
    NAME VARCHAR(30) CONSTRAINT EVT_NAME_NN NOT NULL,
    START_DATE DATE CONSTRAINT EVT_START_DATE_NN NOT NULL,
    END_DATE DATE CONSTRAINT EVT_END_DATE_NN NOT NULL,
    LOCATION VARCHAR(50),
    CONTENT VARCHAR(200),
    CAT_NO NUMBER,
    CONSTRAINT EVT_CAT_FK FOREIGN KEY(CAT_NO) REFERENCES EVT_CATEGORY(CAT_NO)
);

COMMENT ON COLUMN EVENT.EVT_NO IS '이벤트번호';
COMMENT ON COLUMN EVENT.NAME IS '이벤트명';
COMMENT ON COLUMN EVENT.START_DATE IS '시작일';
COMMENT ON COLUMN EVENT.END_DATE IS '종료일';
COMMENT ON COLUMN EVENT.LOCATION IS '장소';
COMMENT ON COLUMN EVENT.CONTENT IS '내용';
COMMENT ON COLUMN EVENT.CAT_NO IS '분류번호';

--------------------------------------------------------------------------------
DROP TABLE CALENDAR CASCADE CONSTRAINTS PURGE;
CREATE TABLE CALENDAR (
    CAL_NO NUMBER CONSTRAINT CAL_PK PRIMARY KEY,
    NAME VARCHAR(20) CONSTRAINT CAL_NAME_NN NOT NULL
);

COMMENT ON COLUMN CALENDAR.CAL_NO IS '캘린더번호';
COMMENT ON COLUMN CALENDAR.NAME IS '캘린더명';

--------------------------------------------------------------------------------
DROP TABLE EVT_CAL_REGISTRATION CASCADE CONSTRAINTS PURGE;
CREATE TABLE EVT_CAL_REGISTRATION (
    REG_NO NUMBER CONSTRAINT EVT_CAL_PK PRIMARY KEY,
    CAL_NO NUMBER,
    EVT_NO NUMBER,
    CONSTRAINT EVT_CAL_CAL_FK FOREIGN KEY(CAL_NO) REFERENCES CALENDAR(CAL_NO),
    CONSTRAINT EVT_CAL_EVT_FK FOREIGN KEY(EVT_NO) REFERENCES EVENT(EVT_NO)
);

COMMENT ON COLUMN EVT_CAL_REGISTRATION.REG_NO IS '등록번호';
COMMENT ON COLUMN EVT_CAL_REGISTRATION.CAL_NO IS '캘린더번호';
COMMENT ON COLUMN EVT_CAL_REGISTRATION.EVT_NO IS '이벤트번호';

--------------------------------------------------------------------------------
DROP TABLE CAL_REGISTRATION CASCADE CONSTRAINTS PURGE;
CREATE TABLE CAL_REGISTRATION (
    REG_NO NUMBER CONSTRAINT CAL_REG_PK PRIMARY KEY,
    COLOR VARCHAR(10) DEFAULT 'GRAY' CONSTRAINT REG_COLOR_NN NOT NULL,
    CAL_NO NUMBER,
    EMP_NO NUMBER,
    CONSTRAINT CAL_REG_CAL_FK FOREIGN KEY(CAL_NO) REFERENCES CALENDAR(CAL_NO) ON DELETE CASCADE,
    CONSTRAINT CAL_REG_EMP_FK FOREIGN KEY(EMP_NO) REFERENCES EMPLOYEE(EMP_NO) ON DELETE CASCADE
);

COMMENT ON COLUMN CAL_REGISTRATION.REG_NO IS '등록번호';
COMMENT ON COLUMN CAL_REGISTRATION.COLOR IS '색깔';
COMMENT ON COLUMN CAL_REGISTRATION.CAL_NO IS '캘린더번호';
COMMENT ON COLUMN CAL_REGISTRATION.EMP_NO IS '사원번호';

--------------------------------------------------------------------------------
DROP TABLE LIKE_CAL_REGISTRATION CASCADE CONSTRAINTS PURGE;
CREATE TABLE LIKE_CAL_REGISTRATION (
    REG_NO NUMBER CONSTRAINT LIKE_CAL_REG_PK PRIMARY KEY,
    COLOR VARCHAR(10) DEFAULT 'GRAY' CONSTRAINT LIKE_REG_COLOR_NN NOT NULL,
    CAL_NO NUMBER,
    EMP_NO NUMBER,
    CAL_STATUS VARCHAR(1) DEFAULT 'N',
    CONSTRAINT LIKE_REG_CHK CHECK (CAL_STATUS IN('Y', 'N')),
    CONSTRAINT LIKE_CAL_REG_CAL_FK FOREIGN KEY(CAL_NO) REFERENCES CALENDAR(CAL_NO) ON DELETE CASCADE,
    CONSTRAINT LIKE_CAL_REG_EMP_FK FOREIGN KEY(EMP_NO) REFERENCES EMPLOYEE(EMP_NO) ON DELETE CASCADE   
);

COMMENT ON COLUMN LIKE_CAL_REGISTRATION.REG_NO IS '등록번호';
COMMENT ON COLUMN LIKE_CAL_REGISTRATION.COLOR IS '색깔';
COMMENT ON COLUMN LIKE_CAL_REGISTRATION.CAL_NO IS '캘린더번호';
COMMENT ON COLUMN LIKE_CAL_REGISTRATION.EMP_NO IS '사원번호';
COMMENT ON COLUMN LIKE_CAL_REGISTRATION.CAL_STATUS IS '등록수락상태';

--------------------------------------------------------------------------------
DROP TABLE ATTENDANT CASCADE CONSTRAINTS PURGE;
CREATE TABLE ATTENDANT (
    ATT_NO NUMBER CONSTRAINT ATT_PK PRIMARY KEY,
    EVT_NO NUMBER,
    EMP_NO NUMBER,
    CONSTRAINT ATT_EVT_FK FOREIGN KEY(EVT_NO) REFERENCES EVENT(EVT_NO) ON DELETE CASCADE,
    CONSTRAINT ATT_EMP_FK FOREIGN KEY(EMP_NO) REFERENCES EMPLOYEE(EMP_NO) ON DELETE CASCADE   
);

COMMENT ON COLUMN ATTENDANT.ATT_NO IS '참석자번호';
COMMENT ON COLUMN ATTENDANT.EVT_NO IS '이벤트번호';
COMMENT ON COLUMN ATTENDANT.EMP_NO IS '사원번호';

--------------------------------------------------------------------------------
-- 시퀀스 -----------------------------------------------------------------------
-- CALENDAR
-- CAL_REGISTRATION
-- LIKE_CAL_REGISTRATION
-- EVT_CAL_REGISTRATION
-- EVENT
-- ATTENDANT
-- EVT_CATEGORY
CREATE SEQUENCE SEQ_CAL;
CREATE SEQUENCE SEQ_CAL_REG;
CREATE SEQUENCE SEQ_LIKE_CAL_REG;
CREATE SEQUENCE SEQ_EVT_CAL_REG;
CREATE SEQUENCE SEQ_EVT;
CREATE SEQUENCE SEQ_ATT;
CREATE SEQUENCE SEQ_EVT_CAT;

DROP SEQUENCE SEQ_CAL;
DROP SEQUENCE SEQ_CAL_REG;
DROP SEQUENCE SEQ_LIKE_CAL_REG;
DROP SEQUENCE SEQ_EVT_CAL_REG;
DROP SEQUENCE SEQ_EVT;
DROP SEQUENCE SEQ_ATT;
DROP SEQUENCE SEQ_EVT_CAT;

-----------------------------------------------------------------------------------------------------------------------------------------------------------
-- 예약 ----------------------------------------------------------------------------------------------------------------------------------------------------
DROP TABLE ASSET_LIST;
CREATE TABLE ASSET_LIST (
    AL_NO NUMBER CONSTRAINT AL_PK PRIMARY KEY,
    NAME VARCHAR(30) CONSTRAINT AL_NAME_NN NOT NULL,
    EMP_NO NUMBER,
    CONSTRAINT AL_EMP_FK FOREIGN KEY(EMP_NO) REFERENCES EMPLOYEE(EMP_NO) ON DELETE SET NULL
);

COMMENT ON COLUMN ASSET_LIST.AL_NO IS '목록번호';
COMMENT ON COLUMN ASSET_LIST.NAME IS '목록명';
COMMENT ON COLUMN ASSET_LIST.EMP_NO IS '담당자번호';

-------------------------------------------------------------------------------
DROP TABLE AL_USAGE_INFO;
CREATE TABLE AL_USAGE_INFO (
    INFO_NO NUMBER CONSTRAINT AL_USG_INFO_PK PRIMARY KEY,
    NAME VARCHAR(30) CONSTRAINT AL_USG_INFO_NAME_NN NOT NULL,
    AL_NO NUMBER,
    CONSTRAINT AL_USAGE_INFO_AL_FK FOREIGN KEY(AL_NO) REFERENCES ASSET_LIST(AL_NO)
);

COMMENT ON COLUMN AL_USAGE_INFO.INFO_NO IS '이용정보번호';
COMMENT ON COLUMN AL_USAGE_INFO.NAME IS '정보명';
COMMENT ON COLUMN AL_USAGE_INFO.AL_NO IS '목록번호';

-------------------------------------------------------------------------------
DROP TABLE INFO_ATTACHMENT;
CREATE TABLE INFO_ATTACHMENT (
    ATT_NO NUMBER CONSTRAINT INFO_ATT_PK PRIMARY KEY,
    ORIGIN_NAME VARCHAR(100) CONSTRAINT INFO_ATT_ORIGIN_NAME_NN NOT NULL,
    CHANGE_NAME VARCHAR(100),
    UPLOAD_DATE DATE DEFAULT SYSDATE CONSTRAINT INFO_ATT_UPLOAD_DATE NOT NULL,
    PATH VARCHAR(1000) CONSTRAINT INFO_ATT_PATH NOT NULL
);

COMMENT ON COLUMN INFO_ATTACHMENT.ATT_NO IS '파일번호';
COMMENT ON COLUMN INFO_ATTACHMENT.ORIGIN_NAME IS '파일원본명';
COMMENT ON COLUMN INFO_ATTACHMENT.CHANGE_NAME IS '파일수정명';
COMMENT ON COLUMN INFO_ATTACHMENT.UPLOAD_DATE IS '업로드일';
COMMENT ON COLUMN INFO_ATTACHMENT.PATH IS '파일경로';

-------------------------------------------------------------------------------
DROP TABLE AL_INFORMATION;
CREATE TABLE AL_INFORMATION (
    INFO_NO NUMBER CONSTRAINT AL_INFO_PK PRIMARY KEY,
    CONTENT VARCHAR(100),
    ATT_NO NUMBER,
    AL_NO NUMBER,
    CONSTRAINT AL_INFO_ATT_FK FOREIGN KEY(ATT_NO) REFERENCES INFO_ATTACHMENT(ATT_NO),
    CONSTRAINT AL_INFO_AL_FK FOREIGN KEY(AL_NO) REFERENCES ASSET_LIST(AL_NO)
);

COMMENT ON COLUMN AL_INFORMATION.INFO_NO IS '이용안내번호';
COMMENT ON COLUMN AL_INFORMATION.CONTENT IS '내용';
COMMENT ON COLUMN AL_INFORMATION.ATT_NO IS '파일번호';
COMMENT ON COLUMN AL_INFORMATION.AL_NO IS '목록번호';

-------------------------------------------------------------------------------
DROP TABLE ASSET;
CREATE TABLE ASSET (
    AS_NO NUMBER CONSTRAINT AS_PK PRIMARY KEY,
    NAME VARCHAR(20) CONSTRAINT AS_NAME_NN NOT NULL,
    CONTENT VARCHAR(200) CONSTRAINT AS_CONTENT_NN NOT NULL,
    AL_NO NUMBER,
    CONSTRAINT AS_AL_FK FOREIGN KEY(AL_NO) REFERENCES ASSET_LIST(AL_NO)
);

COMMENT ON COLUMN ASSET.AS_NO IS '자산번호';
COMMENT ON COLUMN ASSET.NAME IS '자산명';
COMMENT ON COLUMN ASSET.CONTENT IS '자산정보';
COMMENT ON COLUMN ASSET.AL_NO IS '목록번호';

-------------------------------------------------------------------------------
DROP TABLE RESERVATION;
CREATE TABLE RESERVATION (
    REZ_NO NUMBER CONSTRAINT REZ_PK PRIMARY KEY,
    START_DATE DATE CONSTRAINT REZ_START_DATE_NN NOT NULL,
    END_DATE DATE CONSTRAINT REZ_END_DATE_NN NOT NULL,
    AS_NO NUMBER,
    EMP_NO NUMBER,
    CONSTRAINT REZ_AS_FK FOREIGN KEY(AS_NO) REFERENCES ASSET(AS_NO) ON DELETE CASCADE,
    CONSTRAINT REZ_EMP_FK FOREIGN KEY(EMP_NO) REFERENCES EMPLOYEE(EMP_NO) ON DELETE CASCADE   
);

COMMENT ON COLUMN RESERVATION.REZ_NO IS '예약번호';
COMMENT ON COLUMN RESERVATION.START_DATE IS '시작일';
COMMENT ON COLUMN RESERVATION.END_DATE IS '종료일';
COMMENT ON COLUMN RESERVATION.AS_NO IS '자산번호';
COMMENT ON COLUMN RESERVATION.EMP_NO IS '사원번호';
-------------------------------------------------------------------------------
DROP TABLE REZ_USAGE_INFO;
CREATE TABLE REZ_USAGE_INFO (
    REZ_INFO_NO NUMBER CONSTRAINT REZ_USAGE_INFO_PF PRIMARY KEY,
    CONTENT VARCHAR(30),
    INFO_NO NUMBER,
    REZ_NO NUMBER,
    CONSTRAINT REZ_USG_INFO_FK FOREIGN KEY(INFO_NO) REFERENCES AL_USAGE_INFO(INFO_NO),
    CONSTRAINT REZ_USG_REZ_FK FOREIGN KEY(REZ_NO) REFERENCES RESERVATION(REZ_NO)
);

COMMENT ON COLUMN REZ_USAGE_INFO.REZ_INFO_NO IS '이용번호';
COMMENT ON COLUMN REZ_USAGE_INFO.CONTENT IS '내용';
COMMENT ON COLUMN REZ_USAGE_INFO.INFO_NO IS '이용정보번호';
COMMENT ON COLUMN REZ_USAGE_INFO.REZ_NO IS '예약번호';

--------------------------------------------------------------------------------
-- 시퀀스 -----------------------------------------------------------------------
-- RESERVATION
-- ASSET
-- ASSET_LIST
-- REZ_USAGE_INFO
-- AL_USAGE_INFO
-- AL_INFORMATION
-- INFO_ATTACHMENT
CREATE SEQUENCE SEQ_REZ;
CREATE SEQUENCE SEQ_AS;
CREATE SEQUENCE SEQ_AL;
CREATE SEQUENCE SEQ_REZ_INFO;
CREATE SEQUENCE SEQ_AL_USG_INFO;
CREATE SEQUENCE SEQ_AL_INFO;
CREATE SEQUENCE SEQ_AL_INFO_ATT;

DROP SEQUENCE SEQ_REZ;
DROP SEQUENCE SEQ_AS;
DROP SEQUENCE SEQ_AL;
DROP SEQUENCE SEQ_REZ_INFO;
DROP SEQUENCE SEQ_AL_USG_INFO;
DROP SEQUENCE SEQ_AL_INFO;
DROP SEQUENCE SEQ_AL_INFO_ATT;

-----------------------------------------------------------------------------------------------------------------------------------------------------------
-- DML ----------------------------------------------------------------------------------------------------------------------------------------------------
-- 일정 ----------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- READ ------------------------------------------------------------------------
-- CALENDAR 
-- 해당 사원에 등록된 내 캘린더 리스트 (캘린더명, 캘린더 색깔 같이)
-- selectMyCalList --
SELECT *
FROM CALENDAR C
LEFT JOIN CAL_REGISTRATION CR USING(CAL_NO)
LEFT JOIN EVT_CAL_REGISTRATION ECR USING(CAL_NO)
WHERE EMP_NO = 201;

-- 해당 사원에 등록된 다른 등록된 캘린더 리스트 (해당 캘린더명, 관심 캘린더의 색깔) - 색깔 할 때 헷갈리지 않게 조심

-- EVENT
-- 해당 캘린더에 등록된 이벤트를 참석자와 함께 이벤트 분류명과 같이 출력
-- selectEventList --
SELECT 
    E.EVT_NO, E.NAME, START_DATE, END_DATE, LOCATION, CONTENT, C.NAME "CATEGORY_NAME", ATT_NO, A.EVT_NO "ATT_EVT_NO", EMP_NO, CAT_NO
FROM EVENT E
LEFT JOIN EVT_CATEGORY C USING(CAT_NO)
LEFT JOIN ATTENDANT A ON (E.EVT_NO = A.EVT_NO);

-- selectAttList --
SELECT * FROM ATTENDANT WHERE EVT_NO = 2;

-- EVENT_CATEGORY
-- 이벤트 분류 : 개인, 부서, 전사
SELECT * FROM EVT_CATEGORY;

-- CREATE ----------------------------------------------------------------------
-- CALENDAR 
INSERT INTO CALENDAR VALUES(SEQ_CAL.NEXTVAL, '기본 캘린더');
COMMIT;

---- EVT_CAL_REGISTATION
INSERT INTO EVT_CAL_REGISTRATION VALUES(SEQ_EVT_CAL_REG.NEXTVAL, 1, 2);
INSERT INTO EVT_CAL_REGISTRATION VALUES(SEQ_EVT_CAL_REG.NEXTVAL, 1, 5);
INSERT INTO EVT_CAL_REGISTRATION VALUES(SEQ_EVT_CAL_REG.NEXTVAL, 1, 6);

---- CAL_REGISTRATION
INSERT INTO CAL_REGISTRATION VALUES(SEQ_CAL_REG.NEXTVAL, DEFAULT, 1, 201);
COMMIT;

-- EVENT
-- insertEvent --
INSERT INTO EVENT VALUES(SEQ_EVT.NEXTVAL, '이벤트1', SYSDATE, SYSDATE, '이벤트장소1', '이벤트내용1', 1);
INSERT INTO EVENT VALUES(SEQ_EVT.NEXTVAL, '이벤트2', SYSDATE + 1, SYSDATE + 3, '이벤트장소2', '이벤트내용2', 1);
INSERT INTO EVENT VALUES(SEQ_EVT.NEXTVAL, '이벤트3', SYSDATE + 2, SYSDATE + 4, '이벤트장소3', '이벤트내용3', 1);
COMMIT;

---- ATTENDANT
-- 201 kth
-- insertAttendant --
INSERT INTO ATTENDANT VALUES(SEQ_ATT.NEXTVAL, 2, 201);
INSERT INTO ATTENDANT VALUES(SEQ_ATT.NEXTVAL, 5, 201);
INSERT INTO ATTENDANT VALUES(SEQ_ATT.NEXTVAL, 6, 201);
INSERT INTO ATTENDANT VALUES(SEQ_ATT.NEXTVAL, 2, 202);
COMMIT;

-- EVENT_CATEGORY
INSERT INTO EVT_CATEGORY VALUES(SEQ_EVT_CAT.NEXTVAL, '개인');
INSERT INTO EVT_CATEGORY VALUES(SEQ_EVT_CAT.NEXTVAL, '부서');
INSERT INTO EVT_CATEGORY VALUES(SEQ_EVT_CAT.NEXTVAL, '전사');
COMMIT;

-- UPDATE ----------------------------------------------------------------------
-- CALENDAR 

-- EVENT

-- EVENT_CATEGORY

-- DELETE ----------------------------------------------------------------------
-- CALENDAR 

-- EVENT

-- EVENT_CATEGORY

--------------------------------------------------------------------------------
-- 예약 ----------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------


